#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <100>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

/ {
    behaviors {
        td0: td0 {
            compatible = "zmk,behavior-tap-dance";
            display-name = "Shift/Caps Lock Tap Dance";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT>, <&kp CAPS>;
        };
    };

    rgb_encoder: rgb_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <100>;
    };

    combos {
        compatible = "zmk,combos";

        comma {
            bindings = <&kp COMMA>;
            key-positions = <15 16>;
        };

        period {
            bindings = <&kp PERIOD>;
            key-positions = <24 25>;
        };

        semicolon {
            bindings = <&kp SEMICOLON>;
            key-positions = <2 3>;
        };

        colon {
            bindings = <&kp COLON>;
            key-positions = <9 10>;
        };

        question_mark {
            bindings = <&kp LS(MINUS)>;
            key-positions = <30 31>;
        };

        exclamation_point {
            bindings = <&kp LS(NUMBER_1)>;
            key-positions = <38 39>;
        };

        left_brace {
            bindings = <&kp LA(LS(N8))>;
            key-positions = <4 3>;
        };

        right_brace {
            bindings = <&kp LS(LA(N9))>;
            key-positions = <8 9>;
        };

        left_parenthesis {
            bindings = <&kp LS(N8)>;
            key-positions = <17 16>;
        };

        right_parenthesis {
            bindings = <&kp LS(N9)>;
            key-positions = <23 24>;
        };

        left_bracket {
            bindings = <&kp LA(N8)>;
            key-positions = <32 31>;
        };

        right_bracket {
            bindings = <&kp LA(N9)>;
            key-positions = <37 38>;
        };

        plus {
            bindings = <&kp MINUS>;
            key-positions = <8 23>;
        };

        minus {
            bindings = <&kp SLASH>;
            key-positions = <23 37>;
        };

        asterisk {
            bindings = <&kp LS(APOSTROPHE)>;
            key-positions = <9 24>;
        };

        forward_slash {
            bindings = <&kp LS(N7)>;
            key-positions = <24 38>;
        };

        ampersand {
            bindings = <&kp LS(NUMBER_6)>;
            key-positions = <10 25>;
        };

        pipe {
            bindings = <&kp LA(N7)>;
            key-positions = <25 39>;
        };

        caret {
            bindings = <&kp LS(LA(RIGHT_BRACKET))>;
            key-positions = <7 22>;
        };

        underscore {
            bindings = <&kp LS(SLASH)>;
            key-positions = <22 36>;
        };

        percent {
            bindings = <&kp LS(N5)>;
            key-positions = <5 18>;
        };

        tilde {
            bindings = <&kp LA(RIGHT_BRACKET)>;
            key-positions = <18 33>;
        };

        equals {
            bindings = <&kp LS(N0)>;
            key-positions = <17 32>;
        };

        euro {
            bindings = <&kp LS(N4)>;
            key-positions = <4 17>;
        };

        dollar {
            bindings = <&kp LA(N4)>;
            key-positions = <3 16>;
        };

        backslash {
            bindings = <&kp LS(LA(N7))>;
            key-positions = <16 31>;
        };

        at {
            bindings = <&kp LA(N2)>;
            key-positions = <2 15>;
        };

        hash {
            bindings = <&kp LS(N3)>;
            key-positions = <15 30>;
        };

        less_than {
            bindings = <&kp BACKSLASH>;
            key-positions = <14 15>;
        };

        greater_than {
            bindings = <&kp LS(BACKSLASH)>;
            key-positions = <25 26>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "QWERTY";
            bindings = <
&mo 8       &kp LEFT_BRACKET  &kp W        &kp F       &kp P           &kp B                               &kp UP                &kp J        &kp L       &kp U       &kp Y        &kp APOSTROPHE  &mo 7
&kp ESCAPE  &mt LSHIFT A      &mt LCTRL R  &mt LALT S  &mt LGUI T      &kp G                     &kp LEFT  &kp ENTER  &kp RIGHT  &kp M        &mt RGUI N  &mt RALT E  &mt RCTRL I  &mt RSHIFT O    &to 0
&mo 8       &kp SEMICOLON     &kp X        &kp C       &kp D           &kp V        &kp SPACE              &kp DOWN              &kp K        &kp H       &kp Z       &kp Q        &kp APOSTROPHE  &mo 8
                                           &mo 6       &sk LEFT_SHIFT  &lt 4 SPACE                                               &lt 3 ENTER  &trans      &mo 0
            >;

            sensor-bindings = <&inc_dec_kp K_SCROLL_UP K_SCROLL_DOWN>;
        };

        lower_layer {
            display-name = "NUMBER";
            bindings = <
&trans  &kp N1           &kp N2          &kp N3        &kp N4        &kp N5                                         &mmv MOVE_UP                     &kp N6           &kp N7           &kp N8           &kp N9           &kp N0    &kp BSPC
&trans  &bt BT_CLR_ALL   &bt BT_SEL 0    &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3                   &mmv MOVE_LEFT  &mkp LCLK       &mmv MOVE_RIGHT  &kp LEFT         &kp DOWN         &kp UP           &kp RIGHT        &kp HOME  &kp PG_UP
&trans  &rgb_ug RGB_OFF  &rgb_ug RGB_ON  &trans        &trans        &rgb_ug RGB_EFF  &kp C_MUTE                    &mmv MOVE_DOWN                   &rgb_ug RGB_EFR  &rgb_ug RGB_SPI  &rgb_ug RGB_BRI  &rgb_ug RGB_BRD  &kp END   &kp PG_DN
                                         &trans        &trans        &trans                                                                          &kp INS          &kp DEL          &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        raise_layer {
            display-name = "SYMBOL";
            bindings = <
&trans  &kp EXCL      &kp AT        &kp HASH   &kp DLLR   &kp PRCNT                            &mmv MOVE_UP                     &kp CARET  &kp AMPS   &kp ASTRK  &kp LPAR  &kp RPAR  &kp BSPC
&trans  &bt BT_CLR    &mkp LCLK     &mkp MCLK  &mkp RCLK  &mkp MB4             &mmv MOVE_LEFT  &mkp LCLK       &mmv MOVE_RIGHT  &kp MINUS  &kp EQUAL  &kp LBKT   &kp RBKT  &kp BSLH  &kp GRAVE
&trans  &out OUT_USB  &out OUT_BLE  &none      &none      &mkp MB5   &trans                    &mmv MOVE_DOWN                   &kp UNDER  &kp PLUS   &kp LBRC   &kp RBRC  &kp PIPE  &kp TILDE
                                    &trans     &trans     &kp SPACE                                                             &kp RET    &trans     &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        layer_3 {
            display-name = "Fn";
            bindings = <
&studio_unlock  &kp F1      &kp F2     &kp F3       &kp F4     &kp F5                                  &mmv MOVE_UP                     &kp F6       &kp F7     &kp F8       &kp F9      &kp F10          &kp F11
&trans          &trans      &mkp LCLK  &mkp MCLK    &mkp RCLK  &mkp MB4                &mmv MOVE_LEFT  &mkp LCLK       &mmv MOVE_RIGHT  &bootloader  &mkp LCLK  &mkp MCLK    &mkp RCLK   &kp PRINTSCREEN  &kp F12
&trans          &sys_reset  &trans     &bootloader  &trans     &mkp MB5  &kp C_MUTE                    &mmv MOVE_DOWN                   &trans       &trans     &bootloader  &sys_reset  &kp SCROLLLOCK   &kp PAUSE_BREAK
                                       &trans       &trans     &trans                                                                   &trans       &trans     &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        NAV {
            bindings = <
&trans  &trans  &trans     &trans     &trans     &trans                            &mmv MOVE_UP                     &kp PAGE_UP    &kp HOME        &kp UP_ARROW    &kp END          &kp INSERT  &trans
&trans  &trans  &mkp MCLK  &mkp RCLK  &mkp LCLK  &trans            &mmv MOVE_LEFT  &trans          &mmv MOVE_RIGHT  &kp PAGE_DOWN  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &trans      &trans
&trans  &trans  &trans     &trans     &trans     &trans  &trans                    &mmv MOVE_DOWN                   &kp LG(LS(Z))  &kp LG(V)       &kp LG(C)       &kp LG(X)        &kp LG(Z)   &trans
                           &to 0      &trans     &trans                                                             &trans         &tog 4          &trans
            >;

            sensor-bindings = <&inc_dec_kp RIGHT_ARROW LEFT_ARROW>;
        };

        NUM {
            bindings = <
&trans  &trans  &kp N7  &kp N8  &kp N9  &trans                        &trans          &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp N0  &kp N4  &kp N5  &kp N6  &trans                &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &kp N1  &kp N2  &kp N3  &trans  &kp K_MUTE            &trans          &trans  &trans  &trans  &trans  &trans  &trans
                        &to 0   &trans  &trans                                        &trans  &trans  &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
        };

        FUN {
            bindings = <
&trans  &kp F12  &kp F7  &kp F8  &kp F9  &trans                        &trans                        &trans  &kp F21  &kp F22  &kp F23  &kp F24  &trans
&trans  &kp F11  &kp F4  &kp F5  &kp F6  &trans            &kp C_NEXT  &trans            &kp C_NEXT  &trans  &kp F17  &kp F18  &kp F19  &kp F20  &trans
&trans  &kp F10  &kp F1  &kp F2  &kp F3  &trans  &trans                &kp C_PLAY_PAUSE              &trans  &kp F13  &kp F14  &kp F15  &kp F16  &trans
                         &to 0   &trans  &trans                                                      &trans  &trans   &trans
            >;

            sensor-bindings = <&inc_dec_kp C_BRIGHTNESS_INC C_BRIGHTNESS_DEC>;
        };

        RGB {
            bindings = <
&none  &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_EFF                  &none         &none  &none  &none  &none  &none  &none
&none  &none            &none            &none            &rgb_ug RGB_TOG  &none                     &none  &none  &none  &none  &none  &none  &none  &none  &none
&none  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFR  &none           &none         &none  &none  &none  &none  &none  &none
                                         &none            &none            &none                                          &none  &none  &none
            >;
        };

        BLE {
            bindings = <
&none  &none  &none  &none  &none  &bt BT_CLR                      &none         &bt BT_NXT  &bt BT_DISC 0  &bt BT_DISC 1  &bt BT_DISC 2  &bt BT_DISC 3  &bt BT_DISC 4
&none  &none  &none  &none  &none  &none                    &none  &none  &none  &none       &out OUT_BLE   &out OUT_USB   &none          &none          &none
&none  &none  &none  &none  &none  &bt BT_CLR_ALL  &none           &none         &bt BT_PRV  &bt BT_SEL 0   &bt BT_SEL 1   &bt BT_SEL 2   &bt BT_SEL 3   &bt BT_SEL 4
                     &none  &none  &none                                         &none       &none          &none
            >;
        };
    };
};
